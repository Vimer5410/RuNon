@page "/test"
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@rendermode InteractiveServer
@* Blazor компонент анонимного чата с фильтрами поиска - оптимизированная версия *@

<div class="chat-container">
    @* Заголовок приложения *@
    <div class="header-section">
        <h1 class="header-title">
            <i class="fas fa-user-secret"></i>
            Анонимный Чат
        </h1>
        <div class="header-subtitle">Найди собеседника по интересам</div>
    </div>

    @* Статус подключения *@
    <div class="status-card">
        <div class="connection-status">
            @{
                string statusClass = "status-disconnected";
                string statusText = "Отключен";
                string statusIcon = "fa-wifi-slash";
            }
            <div class="status-indicator @statusClass"></div>
            <div class="status-info">
                <i class="fas @statusIcon"></i>
                <span>@statusText</span>
            </div>
        </div>
        
        <div class="connection-info">
            <div class="connection-label">
                <i class="fas fa-id-card"></i>
                Ваш ID: <code class="connection-id">@(connectionId ?? "Не подключен")</code>
            </div>
        </div>
    </div>

    @* Основная сетка с фильтрами *@
    <div class="main-grid">
        @* Панель фильтров поиска *@
        <div class="filters-panel">
            <div class="panel-header">
                <i class="fas fa-search"></i>
                <h3>Поиск собеседника</h3>
            </div>
            
            <div class="filter-section">
                <div class="section-title">Мои данные</div>
                
                <div class="filter-group">
                    <label class="filter-label">Мой пол:</label>
                    <div class="radio-group">
                        <label class="radio-option">
                            <input type="radio" name="myGender" value="male" @onchange="@((e) => myGender = e.Value.ToString())">
                            <span class="radio-custom"></span>
                            <i class="fas fa-mars gender-icon male"></i>
                            Мужской
                        </label>
                        <label class="radio-option">
                            <input type="radio" name="myGender" value="female" @onchange="@((e) => myGender = e.Value.ToString())">
                            <span class="radio-custom"></span>
                            <i class="fas fa-venus gender-icon female"></i>
                            Женский
                        </label>
                    </div>
                </div>

                <div class="filter-group">
                    <label class="filter-label">Мой возраст:</label>
                    <select class="filter-select" @onchange="@((e) => myAge = int.Parse(e.Value.ToString()))">
                        <option value="0">Выберите возраст</option>
                        @for (int i = 16; i <= 60; i++)
                        {
                            <option value="@i">@i лет</option>
                        }
                    </select>
                </div>
            </div>

            <div class="filter-section">
                <div class="section-title">Ищу собеседника</div>
                
                <div class="filter-group">
                    <label class="filter-label">Пол собеседника:</label>
                    <div class="radio-group">
                        <label class="radio-option">
                            <input type="radio" name="targetGender" value="any" @onchange="@((e) => targetGender = e.Value.ToString())" checked>
                            <span class="radio-custom"></span>
                            <i class="fas fa-users gender-icon any"></i>
                            Любой
                        </label>
                        <label class="radio-option">
                            <input type="radio" name="targetGender" value="male" @onchange="@((e) => targetGender = e.Value.ToString())">
                            <span class="radio-custom"></span>
                            <i class="fas fa-mars gender-icon male"></i>
                            Мужской
                        </label>
                        <label class="radio-option">
                            <input type="radio" name="targetGender" value="female" @onchange="@((e) => targetGender = e.Value.ToString())">
                            <span class="radio-custom"></span>
                            <i class="fas fa-venus gender-icon female"></i>
                            Женский
                        </label>
                    </div>
                </div>

                <div class="filter-group">
                    <label class="filter-label">Возраст собеседника:</label>
                    <div class="age-range">
                        <select class="filter-select small" @onchange="@((e) => minAge = int.Parse(e.Value.ToString()))">
                            <option value="16">16+</option>
                            @for (int i = 18; i <= 50; i += 2)
                            {
                                <option value="@i">@i+</option>
                            }
                        </select>
                        <span class="age-separator">до</span>
                        <select class="filter-select small" @onchange="@((e) => maxAge = int.Parse(e.Value.ToString()))">
                            <option value="60">60</option>
                            @for (int i = 20; i <= 60; i += 2)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="search-actions">
                <button class="search-btn primary" @onclick="StartSearch" disabled="@(!CanStartSearch())">
                    <i class="fas fa-search"></i>
                    Начать поиск
                </button>
                <button class="search-btn secondary" @onclick="StopSearch" disabled="@(!isSearching)">
                    <i class="fas fa-stop"></i>
                    Остановить
                </button>
            </div>

            @if (isSearching)
            {
                <div class="search-status">
                    <div class="search-animation">
                        <div class="search-dot"></div>
                        <div class="search-dot"></div>
                        <div class="search-dot"></div>
                    </div>
                    <div class="search-text">Ищем собеседника...</div>
                </div>
            }
        </div>

        @* Основная область чата *@
        <div class="chat-area">
            @if (currentChatPartner != null)
            {
                @* Информация о текущем собеседнике *@
                <div class="partner-info">
                    <div class="partner-avatar">
                        <i class="fas @(currentChatPartner.Gender == "male" ? "fa-mars" : currentChatPartner.Gender == "female" ? "fa-venus" : "fa-user")"></i>
                    </div>
                    <div class="partner-details">
                        <div class="partner-name">Собеседник найден!</div>
                        <div class="partner-stats">
                            @currentChatPartner.Gender, @currentChatPartner.Age лет
                        </div>
                    </div>
                    <button class="disconnect-btn" @onclick="DisconnectFromPartner" title="Завершить диалог">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                @* Область сообщений *@
                <div class="messages-area">
                    @if (chatMessages != null && chatMessages.Any())
                    {
                        @foreach (var message in chatMessages)
                        {
                            <div class="message @(message.IsFromMe ? "my-message" : "partner-message")">
                                <div class="message-content">
                                    @message.Text
                                </div>
                                <div class="message-time">
                                    @message.Timestamp.ToString("HH:mm")
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="chat-start">
                            <i class="fas fa-comments"></i>
                            <p>Диалог начат! Напишите первое сообщение.</p>
                        </div>
                    }
                </div>

                @* Поле ввода сообщения *@
                <div class="message-input-area">
                    <div class="input-group">
                        <input type="text" 
                               class="message-input" 
                               placeholder="Введите сообщение..."
                               @bind="currentMessage"
                               @onkeypress="@((e) => { if (e.Key == "Enter") SendMessageToPartner(); })"
                               @bind:event="oninput">
                        <button class="send-btn" 
                                @onclick="SendMessageToPartner"
                                disabled="@(string.IsNullOrWhiteSpace(currentMessage))">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            }
            else
            {
                @* Состояние без активного чата *@
                <div class="no-chat-state">
                    <div class="no-chat-icon">
                        <i class="fas fa-user-plus"></i>
                    </div>
                    <div class="no-chat-title">Готов к общению?</div>
                    <div class="no-chat-description">
                        Заполните фильтры поиска и нажмите "Начать поиск" чтобы найти собеседника
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Данные пользователя
    private string myGender = "";
    private int myAge = 0;
    
    // Фильтры поиска
    private string targetGender = "any";
    private int minAge = 16;
    private int maxAge = 60;
    
    // Состояние поиска и чата
    private bool isSearching = false;
    private ChatPartner currentChatPartner = null;
    private string currentMessage = "";
    private List<ChatMessage> chatMessages = new List<ChatMessage>();
    
    // Подключение
    private string connectionId = "";
    private bool isConnected = false;

    public class ChatPartner
    {
        public string Id { get; set; }
        public string Gender { get; set; }
        public int Age { get; set; }
    }

    public class ChatMessage
    {
        public string Text { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsFromMe { get; set; }
    }

    private bool CanStartSearch()
    {
        return !string.IsNullOrEmpty(myGender) && 
               myAge > 0 && 
               !isSearching && 
               isConnected && 
               currentChatPartner == null;
    }

    private async Task StartSearch()
    {
        isSearching = true;
        // Здесь ваша логика поиска собеседника через SignalR
        // await hubConnection.SendAsync("StartSearch", myGender, myAge, targetGender, minAge, maxAge);
    }

    private async Task StopSearch()
    {
        isSearching = false;
        // await hubConnection.SendAsync("StopSearch");
    }

    private async Task SendMessageToPartner()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage) && currentChatPartner != null)
        {
            // Добавляем сообщение в локальный чат
            chatMessages.Add(new ChatMessage
            {
                Text = currentMessage,
                Timestamp = DateTime.Now,
                IsFromMe = true
            });
            
            // Отправляем через SignalR
            // await hubConnection.SendAsync("SendMessageToPartner", currentChatPartner.Id, currentMessage);
            
            currentMessage = "";
        }
    }

    private async Task DisconnectFromPartner()
    {
        // await hubConnection.SendAsync("DisconnectFromPartner", currentChatPartner.Id);
        currentChatPartner = null;
        chatMessages.Clear();
    }
}




<style>
/* Оптимизированные переменные без избыточных эффектов */
:root {
    --primary-color: #6366f1;
    --primary-light: #818cf8;
    --primary-dark: #4f46e5;
    --secondary-color: #ec4899;
    --success-color: #10b981;
    --danger-color: #ef4444;
    --warning-color: #f59e0b;
    
    --bg-primary: #0f0f23;
    --bg-secondary: #1a1a2e;
    --bg-tertiary: #16213e;
    --bg-accent: #2563eb;
    
    --text-primary: #ffffff;
    --text-secondary: #cbd5e1;
    --text-muted: #64748b;
    
    --border-color: #334155;
    --border-light: #475569;
    
    --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.2);
}

/* Базовые стили */
body {
    background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
    min-height: 100vh;
    font-family: 'Inter', -apple-system, system-ui, sans-serif;
    color: var(--text-primary);
    margin: 0;
    padding: 0;
}

.chat-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1.5rem;
    min-height: 100vh;
}

/* Заголовок */
.header-section {
    text-align: center;
    margin-bottom: 2rem;
}

.header-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--primary-color);
    margin: 0 0 0.5rem 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.header-title i {
    color: var(--secondary-color);
}

.header-subtitle {
    color: var(--text-secondary);
    font-size: 1.1rem;
    font-weight: 500;
}

/* Карточка статуса */
.status-card {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow);
}

.connection-status {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.status-connected { background-color: var(--success-color); }
.status-disconnected { background-color: var(--danger-color); }
.status-connecting { background-color: var(--warning-color); }

.status-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
}

.connection-info {
    background: var(--bg-secondary);
    padding: 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.connection-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
}

.connection-id {
    color: var(--primary-color);
    background: var(--bg-primary);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-family: 'JetBrains Mono', monospace;
}

/* Основная сетка */
.main-grid {
    display: grid;
    grid-template-columns: 350px 1fr;
    gap: 2rem;
}

/* Панель фильтров */
.filters-panel {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
    height: fit-content;
    position: sticky;
    top: 1rem;
}

.panel-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 2rem;
    color: var(--primary-color);
    font-weight: 700;
    font-size: 1.25rem;
}

.filter-section {
    margin-bottom: 2rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1.5rem;
}

.filter-section:last-of-type {
    border-bottom: none;
    margin-bottom: 1.5rem;
}

.section-title {
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.filter-group {
    margin-bottom: 1.25rem;
}

.filter-label {
    display: block;
    margin-bottom: 0.75rem;
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.radio-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.radio-option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 6px;
    transition: background-color 0.2s ease;
}

.radio-option:hover {
    background: var(--bg-secondary);
}

.radio-option input[type="radio"] {
    display: none;
}

.radio-custom {
    width: 16px;
    height: 16px;
    border: 2px solid var(--border-light);
    border-radius: 50%;
    position: relative;
    transition: all 0.2s ease;
}

.radio-option input[type="radio"]:checked + .radio-custom {
    border-color: var(--primary-color);
    background: var(--primary-color);
}

.radio-option input[type="radio"]:checked + .radio-custom::after {
    content: '';
    width: 6px;
    height: 6px;
    background: white;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.gender-icon {
    font-size: 1.1rem;
}

.gender-icon.male { color: #3b82f6; }
.gender-icon.female { color: #ec4899; }
.gender-icon.any { color: var(--text-secondary); }

.filter-select {
    width: 100%;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 0.75rem;
    color: var(--text-primary);
    font-size: 0.9rem;
    cursor: pointer;
}

.filter-select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
}

.age-range {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.filter-select.small {
    width: auto;
    min-width: 80px;
}

.age-separator {
    color: var(--text-muted);
    font-size: 0.9rem;
}

.search-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
}

.search-btn {
    padding: 0.75rem 1rem;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.search-btn.primary {
    background: var(--primary-color);
    color: white;
}

.search-btn.primary:hover:not(:disabled) {
    background: var(--primary-dark);
    transform: translateY(-1px);
}

.search-btn.secondary {
    background: var(--danger-color);
    color: white;
}

.search-btn.secondary:hover:not(:disabled) {
    background: #dc2626;
    transform: translateY(-1px);
}

.search-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.search-status {
    text-align: center;
    padding: 1rem;
    background: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.search-animation {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
    margin-bottom: 0.75rem;
}

.search-dot {
    width: 8px;
    height: 8px;
    background: var(--primary-color);
    border-radius: 50%;
    animation: search-pulse 1.5s infinite;
}

.search-dot:nth-child(2) { animation-delay: 0.2s; }
.search-dot:nth-child(3) { animation-delay: 0.4s; }

@@keyframes search-pulse {
    0%, 60%, 100% { opacity: 0.3; transform: scale(1); }
    30% { opacity: 1; transform: scale(1.2); }
}

.search-text {
    color: var(--text-secondary);
    font-weight: 500;
}

/* Область чата */
.chat-area {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    min-height: 600px;
}

.partner-info {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--bg-secondary);
    border-radius: 12px 12px 0 0;
}

.partner-avatar {
    width: 48px;
    height: 48px;
    background: var(--primary-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
}

.partner-details {
    flex: 1;
}

.partner-name {
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.partner-stats {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.disconnect-btn {
    background: var(--danger-color);
    border: none;
    border-radius: 6px;
    padding: 0.5rem;
    color: white;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.disconnect-btn:hover {
    background: #dc2626;
}

.messages-area {
    flex: 1;
    padding: 1.5rem;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.message {
    max-width: 80%;
    word-wrap: break-word;
}

.my-message {
    align-self: flex-end;
}

.my-message .message-content {
    background: var(--primary-color);
    color: white;
    border-radius: 12px 12px 4px 12px;
}

.partner-message .message-content {
    background: var(--bg-secondary);
    color: var(--text-primary);
    border-radius: 12px 12px 12px 4px;
}

.message-content {
    padding: 0.75rem 1rem;
    margin-bottom: 0.25rem;
}

.message-time {
    font-size: 0.75rem;
    color: var(--text-muted);
    text-align: right;
}

.my-message .message-time {
    text-align: right;
}

.partner-message .message-time {
    text-align: left;
}

.chat-start {
    text-align: center;
    color: var(--text-secondary);
    padding: 2rem;
}

.chat-start i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
    display: block;
}

.no-chat-state {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    text-align: center;
}

.no-chat-icon {
    font-size: 3rem;
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.no-chat-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
}

.no-chat-description {
    color: var(--text-secondary);
    max-width: 300px;
    line-height: 1.5;
}

.message-input-area {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
}

.input-group {
    display: flex;
    gap: 0.75rem;
}

.message-input {
    flex: 1;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem;
    color: var(--text-primary);
    font-size: 0.9rem;
}

.message-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
}

.send-btn {
    background: var(--primary-color);
    border: none;
    border-radius: 8px;
    padding: 0.75rem;
    color: white;
    cursor: pointer;
    transition: background-color 0.2s ease;
    min-width: 48px;
}

.send-btn:hover:not(:disabled) {
    background: var(--primary-dark);
}

.send-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

/* Адаптивность */
@@media (max-width: 1024px) {
    .main-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    .filters-panel {
        position: static;
    }
}

@@media (max-width: 768px) {
    .chat-container {
        padding: 1rem;
    }
    
    .header-title {
        font-size: 2rem;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .radio-group {
        flex-direction: row;
        flex-wrap: wrap;
    }

</style>