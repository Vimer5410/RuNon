@page "/voice-chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<div class="voice-chat">
    <h3> Голосовой чат </h3>
    
    <div class="controls">
        @if (!isInCall)
        {
            <button @onclick="JoinCall" class="btn-join"> Подключиться к звонку </button>
        }
        else
        {
            <button @onclick="LeaveCall" class="btn-leave"> Отключиться </button>
        }
    </div>

    <div class="participants">
        <h4>Участники звонка:</h4>
        <table class="users-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Статус</th>
                    <th>Время подключения</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in participants)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Status</td>
                        <td>@user.JoinTime</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private bool isInCall = false;
    private List<Participant> participants = new();

    private async Task OpenSignalR()
    {
        if (hubConnection == null)
        {
            var httpClientHandler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = 
                    HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
            };
    
        
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/simplehub"), options =>
                {
                    options.HttpMessageHandlerFactory = _ => httpClientHandler;
                })
                .Build();

            await hubConnection.StartAsync();
        }
    }
    
    class Participant
    {
        public string Id { get; set; }
        public string Status { get; set; }
        public string JoinTime { get; set; }
    }
    
    
    
    
    
    
    
    // логика работы с WebRTC + сигналлинг
    
    private async Task JoinCall()
    {
        await OpenSignalR();
        isInCall = true;
        await hubConnection.SendAsync("JoinCall");
    }

    private async Task LeaveCall()
    {
        isInCall = false;
        await hubConnection.SendAsync("LeaveCall");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
}

<style>
    .voice-chat {
        padding: 20px;
    }
    
    .controls {
        margin: 20px 0;
    }
    
    .btn-join {
        background: green;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
    }
    
    .btn-leave {
        background: red;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
    }
    
    .users-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .users-table th, .users-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    
    .users-table th {
        background: #f2f2f2;
    }
</style>