@page "/voice-chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="voice-chat">
    <h3> Голосовой чат </h3>
    
    <div class="controls">
        @if (!isInCall)
        {
            <button @onclick="JoinCall" class="btn-join"> Подключиться к звонку </button>
        }
        else
        {
            <button @onclick="LeaveCall" class="btn-leave"> Отключиться </button>
        }
    </div>

    <div class="participants">
        <h4>Участники звонка:</h4>
        <table class="users-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Статус</th>
                    <th>Время подключения</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in participants)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Status</td>
                        <td>@user.JoinTime</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private static HubConnection? hubConnection;
    private bool isInCall = false;
    private List<Participant> participants = new();

    

    
    private async Task OpenSignalR()
    {
        if (hubConnection == null)
        {
            var httpClientHandler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = 
                    HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
            };
    
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/simplehub"), options =>
                {
                    options.HttpMessageHandlerFactory = _ => httpClientHandler;
                })
                .Build();

            await hubConnection.StartAsync();
            
            hubConnection.On<string>("ReceiveOffer", async (offerJson) =>
            {
                await JSRuntime.InvokeVoidAsync("ReceiveAudioFromA", offerJson);
            });

            hubConnection.On<string>("ReceiveAnswer", async (answerJson) =>
            {
                await JSRuntime.InvokeVoidAsync("HandleAnswer", answerJson);
            });

            hubConnection.On<string>("ReceiveIceCandidate", async (candidateJson) =>
            {
                await JSRuntime.InvokeVoidAsync("HandleIceCandidate", candidateJson);
            });
            
        }
        
        
        
    }
    
    class Participant
    {
        public string Id { get; set; }
        public string Status { get; set; }
        public string JoinTime { get; set; }
    }
    
    
    
    private async Task JoinCall()
    {
        await OpenSignalR();
        await Task.Delay(500);
        await JSRuntime.InvokeVoidAsync("SendAudioToClientB");
        isInCall = true;
    }
    
    
    //методы C#, вызываемые из JS
    [JSInvokable]
    public static async Task SendOfferToHub(string targetUserId, string offerJson)
    {
        await hubConnection.InvokeAsync("SendWebRtcOffer", targetUserId, offerJson);
    }

    [JSInvokable]
    public static async Task SendIceCandidateToHub(string targetUserId, string candidate)
    {
        await hubConnection.InvokeAsync("SendIceCandidate", targetUserId, candidate);
    }

    [JSInvokable]
    public static async Task SendAnswerToHub(string targetUserId, string answer)
    {
        await hubConnection.InvokeAsync("SendWebRTCAnswer", targetUserId, answer);
    }

    private void LeaveCall()
    {
        throw new NotImplementedException();
    }
    
}

<script>


     async function SendAudioToClientB(targetUserId){
             //основные действия с аудио потоком (изятие и добавление в коннектион)
             const stream=await navigator.mediaDevices.getUserMedia({audio: true});
             const connection = new RTCPeerConnection({iceServers:[{urls: "stun:stun.l.google.com:19302"}]});
             stream.getTracks().forEach(TrackEvent => {connection.addTrack(TrackEvent, stream)} );
             //подписка на ice кандидаты
                 connection.onicecandidate = async (event) => {
                     if (event.candidate){
                         await DotNet.invokeMethodAsync('RuNon_Client', 'SendIceCandidateToHub', 
                             targetUserId, JSON.stringify(event.candidate));
                         }
                     
                 };
                 
            // создание и отправка оффера клиенту B
                    const offer=await connection.createOffer();
                    await connection.setLocalDescription(offer);
                   
                    await DotNet.invokeMethodAsync('RuNon_Client', 'SendOfferToHub', 
                        targetUserId, JSON.stringify(offer));
     }

    
    
    
    async function ReceiveAudioFromA(fromUserId, offerJson){
        
              const offer= JSON.parse(offerJson);
                
              //основные действия с аудио потоком (изятие и добавление в коннектион)
              const stream=await navigator.mediaDevices.getUserMedia({audio: true});
              const connection = new RTCPeerConnection({iceServers:[{urls: "stun:stun.l.google.com:19302"}]});
              stream.getTracks().forEach(TrackEvent => {connection.addTrack(TrackEvent, stream)} );
              
              
              //подписка на ice кандидаты
              connection.onicecandidate =async (event) => {
                 if (event.candidate){
                     await DotNet.invokeMethodAsync('RuNon_Client', 'SendIceCandidateToHub', 
                         fromUserId, JSON.stringify(event.candidate));
                 }
                                  
              };
                              
             await connection.setRemoteDescription(offer);
             const answer=await connection.createAnswer();
             await connection.setLocalDescription(answer);
             
             //answer отправлен клиенту A
             await DotNet.invokeMethodAsync('RuNon_Client', 'SendAnswerToHub', fromUserId, JSON.stringify(answer));
    }
     
</script>








<style>
    .voice-chat {
        padding: 20px;
    }
    
    .controls {
        margin: 20px 0;
    }
    
    .btn-join {
        background: green;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
    }
    
    .btn-leave {
        background: red;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
    }
    
    .users-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .users-table th, .users-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }
    
    .users-table th {
        background: #f2f2f2;
    }
</style>