@page "/voice-chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Voice Room</PageTitle>

<div style="padding: 20px; max-width: 600px; margin: 0 auto;">
    <h2> Голосовая комната</h2>
    
    @if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
    {
        <div style="text-align: center; padding: 30px;">
            <p style="font-size: 18px;">⏳ Подключение к серверу...</p>
        </div>
    }
    else if (!inRoom)
    {
        <div style="margin: 30px 0; text-align: center;">
            <p style="font-size: 16px; margin-bottom: 20px;">
                Нажмите кнопку чтобы присоединиться к голосовой комнате.<br/>
                
            </p>
            
            <button @onclick="JoinRoom" 
                    disabled="@isConnecting"
                    style="width: 100%; padding: 20px; background: #4CAF50; color: white; border: none; border-radius: 8px; font-size: 18px; cursor: pointer;">
                @if (isConnecting)
                {
                    <span>⏳ Вход в комнату...</span>
                }
                else
                {
                    <span> Войти в комнату</span>
                }
            </button>
        </div>
    }
    else
    {
        <div style="background: #c8e6c9; padding: 20px; margin: 20px 0; border-radius: 8px; text-align: center;">
            <h3>✅ Вы в комнате!</h3>
            <p>Участников: <strong>@participantCount</strong></p>
            <p style="font-size: 14px; color: #555; margin-top: 10px;">
                Мой ID: <code>@(hubConnection?.ConnectionId ?? "")</code>
            </p>
        </div>
        
        <button @onclick="LeaveRoom"
                style="width: 100%; padding: 15px; background: #f44336; color: white; border: none; border-radius: 8px; font-size: 16px; cursor: pointer;">
             Выйти из комнаты
        </button>
        
        <div style="margin-top: 20px; padding: 15px; background: #e3f2fd; border-radius: 8px;">
            <strong>СВОдка:</strong>
            <p style="margin: 10px 0 0 0;">
                Откройте эту страницу в нескольких окнах браузера и войдите в комнату
            </p>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div style="background: #ffebee; padding: 15px; margin: 20px 0; border-radius: 8px; color: #c62828;">
            <strong>❌ Ошибка:</strong> @errorMessage
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection; 
    private DotNetObjectReference<Test_VoiceChat> dotNetRef;
    private bool inRoom = false;
    private bool isConnecting = false;
    private int participantCount = 1;
    private string errorMessage = "";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Создаём ссылку для JS
            dotNetRef = DotNetObjectReference.Create(this);
            await ConnectToHub();
        }
    }
    
    private async Task ConnectToHub()
    {
        if (hubConnection == null)
        {
            Console.WriteLine("[C#] Подключение к Hub...");
            
            try
            {
                // Игнорируем SSL ошибки для самоподписанного сертификата
                var httpClientHandler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = 
                        HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                };
    
        
                hubConnection = new HubConnectionBuilder()
                    .WithUrl(Navigation.ToAbsoluteUri("/simplehub"), options =>
                    {
                        options.HttpMessageHandlerFactory = _ => httpClientHandler;
                    })
                    .Build();
                
                hubConnection.On<string>("UserJoined", async (userId) =>
                {
                    Console.WriteLine($"[C#] Пользователь присоединился: {userId}");
                    participantCount++;
                    await InvokeAsync(StateHasChanged);
                    await JSRuntime.InvokeVoidAsync("VoiceChat.handleUserJoined", userId, dotNetRef);
                });
                
                hubConnection.On<string, string>("ReceiveOffer", async (offer, fromUserId) =>
                {
                    Console.WriteLine($"[C#] Получен Offer от {fromUserId}");
                    await JSRuntime.InvokeVoidAsync("VoiceChat.handleOffer", offer, fromUserId, dotNetRef);
                });
                
                hubConnection.On<string>("ReceiveAnswer", async (answer) =>
                {
                    Console.WriteLine("[C#] Получен Answer");
                    await JSRuntime.InvokeVoidAsync("VoiceChat.handleAnswer", answer, "", dotNetRef);
                });
                
                hubConnection.On<string>("ReceiveIceCandidate", async (candidate) =>
                {
                    Console.WriteLine("[C#] Получен ICE");
                    await JSRuntime.InvokeVoidAsync("VoiceChat.handleIce", candidate, "", dotNetRef);
                });
                
                hubConnection.On<string>("UserLeft", async (userId) =>
                {
                    Console.WriteLine($"[C#] Пользователь вышел: {userId}");
                    participantCount = Math.Max(1, participantCount - 1);
                    await InvokeAsync(StateHasChanged);
                    await JSRuntime.InvokeVoidAsync("VoiceChat.handleUserLeft", userId);
                });
                
                await hubConnection.StartAsync();
                Console.WriteLine($"[C#] Подключён к Hub! ID: {hubConnection.ConnectionId}");
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[C#] ОШИБКА подключения: {ex.Message}");
                errorMessage = "Не удалось подключиться к серверу";
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    
    private async Task JoinRoom()
    {
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            errorMessage = "Нет подключения к серверу. Обновите страницу.";
            StateHasChanged();
            return;
        }
        
        isConnecting = true;
        errorMessage = "";
        StateHasChanged();
        
        try
        {
            Console.WriteLine("[C#] Вход в комнату...");
            
            
            // Передаём dotNetRef в JS
            await JSRuntime.InvokeVoidAsync("VoiceChat.joinRoom", dotNetRef);
            inRoom = true;
            Console.WriteLine("[C#] Успешно вошли в комнату!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[C#] ОШИБКА входа в комнату: {ex.Message}");
            errorMessage = $"Не удалось войти в комнату: {ex.Message}";
        }
        finally
        {
            isConnecting = false;
            StateHasChanged();
        }
    }
    
    private void LeaveRoom()
    {
        inRoom = false;
        participantCount = 1;
    }
    
    
    [JSInvokable]
    public async Task JoinRoomOnServer()
    {
        Console.WriteLine($"[C#] JoinRoomOnServer вызван. ID: {hubConnection?.ConnectionId}");
        
        if (hubConnection == null || hubConnection.State != HubConnectionState.Connected)
        {
            throw new InvalidOperationException($"Hub не подключён. State: {hubConnection?.State}");
        }
        
        await hubConnection.InvokeAsync("JoinRoom");
        Console.WriteLine("[C#] JoinRoom успешно вызван на сервере");
    }
    
    [JSInvokable]
    public async Task SendOfferToRoom(string offer)
    {
        Console.WriteLine("[C#] Отправка Offer в комнату");
        await hubConnection!.InvokeAsync("SendOfferToRoom", offer);
    }
    
    [JSInvokable]
    public async Task SendAnswer(string targetId, string answer)
    {
        Console.WriteLine($"[C#] Отправка Answer к {targetId}");
        await hubConnection!.InvokeAsync("SendAnswerToUser", targetId, answer);
    }
    
    [JSInvokable]
    public async Task SendIce(string targetId, string candidate)
    {
        Console.WriteLine($"[C#] Отправка ICE к {targetId}");
        await hubConnection!.InvokeAsync("SendIceCandidateToUser", targetId, candidate);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        dotNetRef?.Dispose();
    }
}